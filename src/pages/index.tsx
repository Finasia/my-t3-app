import { type NextPage } from "next";
import Head from "next/head";
import {api} from "~/utils/api";
import type {RouterOutputs} from "~/utils/api";
import {SignInButton, SignOutButton, useUser} from "@clerk/nextjs";
import Image from "next/image";

import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import {LoadingPage, LoadingSpinner} from "~/components/loading";
import {useState} from "react";
import toast from "react-hot-toast";

dayjs.extend(relativeTime);

const Home: NextPage = () => {
  // const hello = api.example.hello.useQuery({ text: "from tRPC" });
  // console.log(hello.data?.greeting);

  const {isLoaded: userLoaded,isSignedIn} = useUser();

  // Start fetching asap(as soon as possible)
  api.posts.getAll.useQuery()

  // 关于isLoaded:
  // Until Clerk loads and initializes, `isLoaded` will be set to `false`.
  // Once Clerk loads, `isLoaded` will be set to `true`, and you can
  // safely access `isSignedIn` state and `user`.
  // 当Clerk加载和初始化完成后就会设置为true, ***不管你是否登录***
  // 此时你可以安全地访问isSignedIn状态和user
  if(!userLoaded) return <div/>

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        <div className="w-full h-full border-x border-slate-400 md:max-w-2xl">
          <div className="border-b border-slate-400 p-4">
            {!isSignedIn && (
              <div className="flex justify-center">
                <SignInButton/>
              </div>
            )}
            {!!isSignedIn && <CreatePostWizard/>}
          </div>
          <Feed/>
        </div>
      </main>
    </>
  );
};

export default Home;

const CreatePostWizard = () => {
  const {user} = useUser();
  console.log('user:', user);

  const [input, setInput] = useState("");

  const ctx = api.useContext();
  const {mutate, isLoading: isPosting} = api.posts.create.useMutation({
    onSuccess: () => {
      setInput("");
      void ctx.posts.getAll.invalidate() //使用void忽略返回值，防止eslint报错
    },
    onError: (err) => {
      const errorMessages = err.data?.zodError?.fieldErrors.content;
      if (errorMessages && errorMessages[0]) {
        toast.error(errorMessages[0]);
      }
      else if(err.data?.code === "TOO_MANY_REQUESTS"){
        toast.error("The operation is too frequent! Please try again later.");
      }
      else {
        console.log(err);
        toast.error("Failed to post! Please try again later.");
      }
    }
  });

  if(!user) return null;

  return <div className="flex gap-3">
    <Image
      src={user.profileImageUrl}
      alt="Profile image"
      width={56} height={56}
      className="w-14 h-14 rounded-full"
    />
    <input
      placeholder="Type some emojis!"
      className="bg-transparent grow outline-none"
      value={input} onChange={(e)=>setInput(e.target.value)}
      disabled={isPosting}
      onKeyDown={(e) => {
        if (e.key === "Enter") {
          e.preventDefault();
          if (input !== "") {
            mutate({ content: input });
          }
        }
      }}
    />
    {input !== "" && !isPosting && (
      <button onClick={() => mutate({ content: input })}>Post</button>
    )}
    {isPosting && (
      <div className="flex items-center justify-center">
        <LoadingSpinner size={20} />
      </div>
    )}
  </div>
};

// 这里的number是数组的索引，表示取数组里成员的类型，而不是数组本身的类型
// RouterOutputs['posts']['getAll'] 是我们api/routers/posts.ts里的getAll方法的返回值类型
type PostWithUser = RouterOutputs['posts']['getAll'][number]
const PostView = (props:PostWithUser) => {
  const {post,author} = props;
 return (
   <div key={post.id} className="flex border-b border-slate-400 p-4 gap-3">
     <Image
       src={author.profileImageUrl}
       className="w-14 h-14 rounded-full"
       alt={`@${author.username}`}
       width={56}
       height={56}
     />
     <div className="flex flex-col">
       <div className="flex text-slate-300 gap-1">
         <span>{`@${author.username}`}</span>
         <span className="font-thin">{` · ${dayjs(post.createdAt).fromNow()}`}</span>
       </div>
       <span className="text-2xl">{post.content}</span>
     </div>
   </div>
 )
};

const Feed = () => {
  // 这里的useQuery封装了react-query
  const { data,isLoading: postsLoading} = api.posts.getAll.useQuery();
  console.log('Home Feed data:',data);

  if(postsLoading) return <LoadingPage/>

  if(!data) return <div>Something went wrong</div>

  return (
    <div className="flex flex-col">
      {
        data?.map((postWithAuthor) => (
          <PostView key={postWithAuthor.post.id} {...postWithAuthor} />
        ))
      }
    </div>
  )
}
